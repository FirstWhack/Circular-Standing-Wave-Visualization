{"version":3,"sources":["Grower.js","index.js"],"names":["CircularOrbit","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","rAFID","startAnimation","window","requestAnimationFrame","renderNewFrame","bind","assertThisInitialized","getRadianIncrement","resolutionReduction","Math","PI","cb","setState","angle","state","handleClick","cancelAnimationFrame","color","height","width","radius","radian","t","_this2","_polarToCartesian","pathRadius","numberOfPeaks","sin","amplitudeAsPercentage","x","cos","y","rects","_this$props","percentageDrawn","centerOffset","radiusDivider","max","min","i","_this$calculatePositi","calculatePositionOnCircle","push","react_default","a","createElement","lib","onClick","fill","concat","Fragment","React","Component","displayName","canvasSize","App","handleInputChange","_ref","_ref$target","target","value","name","defineProperty","parameterInputs","entries","map","_ref2","_ref3","slicedToArray","key","style","display","justifyContent","onChange","type","Grower_CircularOrbit","assign","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.55b87195.chunk.js","sourcesContent":["import { Circle } from 'react-konva';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class CircularOrbit extends React.Component {\r\n    static displayName = 'CircularOrbit';\r\n    static propTypes = {\r\n        height: PropTypes.number.isRequired,\r\n        width: PropTypes.number.isRequired,\r\n        pathRadius: PropTypes.number.isRequired,\r\n        centerOffset: PropTypes.number.isRequired,\r\n        numberOfPeaks: PropTypes.number.isRequired,\r\n        resolutionReduction: PropTypes.number\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            color: 'green',\r\n            height: props.height,\r\n            width: props.width,\r\n            angle: 0\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.startAnimation();\r\n    }\r\n    rAFID = null;\r\n    startAnimation = () => {\r\n        this.rAFID = window.requestAnimationFrame(this.renderNewFrame.bind(this, this.startAnimation));\r\n    };\r\n    getRadianIncrement = resolutionReduction => Math.PI * 0.001 * (resolutionReduction || 1);\r\n    calculatePositionOnCircle(angle) {\r\n        const polarToCartesian = (radius, radian) => ({\r\n            x: radius * Math.cos(radian),\r\n            y: radius * Math.sin(radian)\r\n        });\r\n        const makeWave = t => Math.sin(t) / (100 / this.props.amplitudeAsPercentage) + 1;\r\n        const { x, y } = polarToCartesian(this.props.pathRadius * makeWave(angle * this.props.numberOfPeaks), angle);\r\n\r\n        return { x, y };\r\n    }\r\n    renderNewFrame = cb => {\r\n        this.setState(\r\n            {\r\n                angle: this.state.angle + this.getRadianIncrement(this.props.resolutionReduction) * 10\r\n            },\r\n            cb\r\n        );\r\n    };\r\n    handleClick = () => {\r\n        if (this.rAFID) {\r\n            window.cancelAnimationFrame(this.rAFID);\r\n            this.rAFID = null;\r\n        } else {\r\n            this.startAnimation();\r\n        }\r\n    };\r\n    render() {\r\n        const rects = [];\r\n        const  {percentageDrawn, resolutionReduction, centerOffset, width, height} = this.props;\r\n        const radiusDivider = 100 / Math.max(1, Math.min(percentageDrawn, 100));\r\n        for (let i = 0; i < (Math.PI * 2) / radiusDivider; i += this.getRadianIncrement(resolutionReduction)) {\r\n            const { x, y } = this.calculatePositionOnCircle(this.state.angle + i);\r\n            rects.push(\r\n                <Circle\r\n                    onClick={this.handleClick}\r\n                    x={x + centerOffset}\r\n                    y={y + centerOffset}\r\n                    width={width}\r\n                    height={height}\r\n                    fill={`rgba(${-i + 200}, ${i * 75}, ${i > 2 ? 255 : 0}, ${i / 8})`}\r\n                />\r\n            );\r\n        }\r\n\r\n        return <React.Fragment>{rects}</React.Fragment>;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Layer, Stage } from 'react-konva';\r\n\r\nimport Grower from './Grower';\r\n\r\nconst canvasSize = 1200;\r\n\r\nclass App extends React.Component {\r\n    static displayName = 'Main';\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            numberOfPeaks: 3.14,\r\n            amplitudeAsPercentage: 30,\r\n            pathRadius: canvasSize / 4,\r\n            percentageDrawn: 50,\r\n            resolutionReduction: 1\r\n        };\r\n    }\r\n    handleInputChange = ({ target: { value, name } }) => this.setState({ [name]: value });\r\n    render() {\r\n        const parameterInputs = Object.entries(this.state).map(([key, value]) => {\r\n            return (\r\n                <label\r\n                    style={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                        width: 350\r\n                    }}\r\n                >\r\n                    {key}:\r\n                    <input onChange={this.handleInputChange} min='1' type=\"number\" name={key} value={value} />\r\n                </label>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {parameterInputs}\r\n                <Stage width={canvasSize} height={canvasSize}>\r\n                    <Layer>\r\n                        <Grower height={10} width={10} {...this.state} centerOffset={canvasSize / 2} />\r\n                    </Layer>\r\n                </Stage>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nrender(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}